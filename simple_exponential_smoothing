{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import numpy as np\n",
    "from pandas import read_csv\n",
    "from matplotlib import pyplot as plt\n",
    "from statsmodels.tsa.api import SimpleExpSmoothing\n",
    "from sklearn.metrics import mean_squared_error \n",
    "from math import sqrt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     t   y\n",
       "0    1   3\n",
       "1    2   5\n",
       "2    3   9\n",
       "3    4  20\n",
       "4    5  12\n",
       "5    6  17\n",
       "6    7  22\n",
       "7    8  23\n",
       "8    9  51\n",
       "9   10  41\n",
       "10  11  56\n",
       "11  12  75\n",
       "12  13  60\n",
       "13  14  75\n",
       "14  15  88"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in the dataset, split as train the first 10 entries and rest as test\n",
    "series = read_csv('datasets/seriesdat.csv')\n",
    "series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = series.iloc[0:10]\n",
    "test = series.iloc[10:]\n",
    "y_hat = test.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal alpha chosen: 0.7893447888465914\n"
     ]
    }
   ],
   "source": [
    "# fit a SES without specifying smooth parameter, so library does it for us\n",
    "fitx = SimpleExpSmoothing(np.asarray(train['y'])).fit(optimized=True)\n",
    "print('optimal alpha chosen:', fitx.model.params['smoothing_level'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit a SES with explicitly supplied smooth parameter\n",
    "fit2 = SimpleExpSmoothing(np.asarray(train['y'])).fit(smoothing_level=0.4, optimized=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse for fitted values with optimal alpha:  10.370473454370066\n",
      "rmse for fitted values with supplied alpha:  11.97758663406276\n"
     ]
    }
   ],
   "source": [
    "# print the rmse of training step\n",
    "rms_train_opt = sqrt(mean_squared_error(train['y'], fitx.fittedvalues)) \n",
    "print('rmse for fitted values with optimal alpha: ', rms_train_opt)\n",
    "rms_train = sqrt(mean_squared_error(train['y'], fit2.fittedvalues)) \n",
    "print('rmse for fitted values with supplied alpha: ', rms_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot training data against fitted values using both models\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(fitx.fittedvalues, label = 'fitted opt')\n",
    "plt.plot(fit2.fittedvalues, label = 'fitted')\n",
    "plt.plot(train['y'], label='train')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t</th>\n",
       "      <th>y</th>\n",
       "      <th>SES_opt_fcast</th>\n",
       "      <th>SES_fcast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>56</td>\n",
       "      <td>41.843246</td>\n",
       "      <td>35.645178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>75</td>\n",
       "      <td>41.843246</td>\n",
       "      <td>35.645178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>60</td>\n",
       "      <td>41.843246</td>\n",
       "      <td>35.645178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>75</td>\n",
       "      <td>41.843246</td>\n",
       "      <td>35.645178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>88</td>\n",
       "      <td>41.843246</td>\n",
       "      <td>35.645178</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     t   y  SES_opt_fcast  SES_fcast\n",
       "10  11  56      41.843246  35.645178\n",
       "11  12  75      41.843246  35.645178\n",
       "12  13  60      41.843246  35.645178\n",
       "13  14  75      41.843246  35.645178\n",
       "14  15  88      41.843246  35.645178"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# forecast using both models\n",
    "y_hat['SES_opt_fcast'] = fitx.forecast(len(y_hat))\n",
    "y_hat['SES_fcast'] = fit2.forecast(len(y_hat))\n",
    "\n",
    "# display forecasted values\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the time series as train, test and forecasted\n",
    "plt.figure(figsize=(10,3))\n",
    "plt.plot(train['y'], label='train')\n",
    "plt.plot(test['y'], label='test')\n",
    "plt.plot(y_hat['SES_fcast'], label='SES_fcast')\n",
    "plt.plot(y_hat['SES_opt_fcast'], label='SES_opt_fcast')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse for model with supplied alpha:  37.00299290567906\n",
      "rmse for model with optimal alpha:  31.174566286273574\n"
     ]
    }
   ],
   "source": [
    "# calculate RMSE of the forecast on test data\n",
    "rms = sqrt(mean_squared_error(test.y, y_hat.SES_fcast)) \n",
    "print('rmse for model with supplied alpha: ', rms)\n",
    "rms_opt = sqrt(mean_squared_error(test.y, y_hat.SES_opt_fcast)) \n",
    "print('rmse for model with optimal alpha: ', rms_opt)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
